node n1 {
    type router
    model router
    network-config {
	hostname n1
	!
	interface eth5
	!
	interface eth4
	 ip address 10.0.13.1/24
	!
	interface eth3
	 ip address 10.0.11.1/24
	!
	interface eth2
	 ip address 10.0.10.1/24
	!
	interface eth1
	 ip address 10.0.1.1/24
	!
	interface eth0
	 ip address 10.0.0.1/24
	!
    }
    canvas c1
    iconcoords {279.97662744138415 293.2163262435488}
    labelcoords {274.97662744138415 280.21632624354925}
    interface-peer {eth0 n10}
    interface-peer {eth1 n7}
    interface-peer {eth2 n2}
    interface-peer {eth3 n3}
    interface-peer {eth4 n6}
    custom-config {
	custom-config-id service:OvsService
	custom-command OvsService
	config {
	files=('OvsService.sh', )
	}
    }
    custom-config {
	custom-config-id service:OvsService:OvsService.sh
	custom-command OvsService.sh
	config {
	#!/bin/sh
	# auto-generated by OvsService (OvsService.py)
	## First make sure that the ovs services are up and running
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch itself, set the fail mode to secure, 
	## this stops it from routing traffic without defined flows.
	## remove the -- and everything after if you want it to act as a regular switch
	ovs-vsctl add-br s1 -- set Bridge s1 fail-mode=secure
	
	ovs-vsctl set bridge s1 other-config:datapath-id=0000000000000001
	ovs-vsctl set bridge s1 stp_enable=true
	
	ip addr del 10.0.1.1 dev eth1
	## Add the CORE interface to the switch
	ovs-vsctl add-port s1 eth1 -- set Interface eth1 ofport_request=1
	ovs-ofctl mod-port s1 eth1 up
	
	ip addr del 10.0.10.1 dev eth2
	## Add the CORE interface to the switch
	ovs-vsctl add-port s1 eth2 -- set Interface eth2 ofport_request=2
	ovs-ofctl mod-port s1 eth2 up
	ip addr del 10.0.11.1 dev eth3
	## Add the CORE interface to the switch
	ovs-vsctl add-port s1 eth3 -- set Interface eth3 ofport_request=3
	ovs-ofctl mod-port s1 eth3 up
	ip addr del 10.0.13.1 dev eth4
	## Add the CORE interface to the switch
	ovs-vsctl add-port s1 eth4 -- set Interface eth4 ofport_request=4
	ovs-ofctl mod-port s1 eth4 up
	
	ip addr del 10.0.22.2 dev eth5
	## Add the CORE interface to the switch
	ovs-vsctl add-port s1 eth5 -- set Interface eth5 ofport_request=5
	ovs-ofctl mod-port s1 eth5 up
	
	
	## We assume there will be an SDN controller on the other end of this, 
	## but it will still function if there's not
	#ovs-vsctl set-controller s1 tcp:10.0.0.254:6633
	#ovs-vsctl set-controller s1 tcp:192.168.56.112:6633
	ovs-vsctl set-controller s1 tcp:172.17.0.1:6633
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.0.254
	
	}
    }
    services {OvsService DefaultRoute}
    interface-peer {eth5 n20}
}

node n2 {
    type router
    model router
    network-config {
	hostname n2
	!
	interface eth5
	 ip address 10.0.15.1/24
	!
	interface eth4
	 ip address 10.0.14.1/24
	!
	interface eth3
	 ip address 10.0.12.2/24
	!
	interface eth2
	 ip address 10.0.10.2/24
	!
	interface eth1
	 ip address 10.0.2.1/24
	!
	interface eth0
	 ip address 10.0.0.2/24
	!
    }
    canvas c1
    iconcoords {462.9005708561837 320.7572176272693}
    labelcoords {452.9005708561837 308.7572176272688}
    interface-peer {eth0 n10}
    interface-peer {eth1 n8}
    interface-peer {eth2 n1}
    interface-peer {eth3 n3}
    interface-peer {eth4 n4}
    interface-peer {eth5 n6}
    custom-config {
	custom-config-id service:OvsService
	custom-command OvsService
	config {
	files=('OvsService.sh', )
	}
    }
    custom-config {
	custom-config-id service:OvsService:OvsService.sh
	custom-command OvsService.sh
	config {
	#!/bin/sh
	# auto-generated by OvsService (OvsService.py)
	## First make sure that the ovs services are up and running
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch itself, set the fail mode to secure, 
	## this stops it from routing traffic without defined flows.
	## remove the -- and everything after if you want it to act as a regular switch
	ovs-vsctl add-br s2 -- set Bridge s2 fail-mode=secure
	ovs-vsctl set bridge s2 other-config:datapath-id=0000000000000002
	ovs-vsctl set bridge s2 stp_enable=true
	ip addr del 10.0.2.1 dev eth1
	## Add the CORE interface to the switch
	ovs-vsctl add-port s2 eth1 -- set Interface eth1 ofport_request=1
	## start them up so we can send/receive data
	ovs-ofctl mod-port s2 eth1 up
	ip addr del 10.0.10.2 dev eth2
	## Add the CORE interface to the switch
	ovs-vsctl add-port s2 eth2 -- set Interface eth2 ofport_request=2
	ovs-ofctl mod-port s2 eth2 up
	ip addr del 10.0.12.2 dev eth3
	## Add the CORE interface to the switch
	ovs-vsctl add-port s2 eth3 -- set Interface eth3 ofport_request=3
	ovs-ofctl mod-port s2 eth3 up
	ip addr del 10.0.14.1 dev eth4
	## Add the CORE interface to the switch
	ovs-vsctl add-port s2 eth4 -- set Interface eth4 ofport_request=4
	## start them up so we can send/receive data
	ovs-ofctl mod-port s2 eth4 up
	ip addr del 10.0.15.1 dev eth5
	## Add the CORE interface to the switch
	ovs-vsctl add-port s2 eth5 -- set Interface eth5 ofport_request=5
	ovs-ofctl mod-port s2 eth5 up
	
	## We assume there will be an SDN controller on the other end of this, 
	## but it will still function if there's not
	#ovs-vsctl set-controller s2 tcp:10.0.0.254:6633
	#ovs-vsctl set-controller s2 tcp:192.168.56.112:6633
	ovs-vsctl set-controller s2 tcp:172.17.0.1:6633
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.0.254
	
	}
    }
    services {OvsService DefaultRoute}
}

node n3 {
    type router
    model router
    network-config {
	hostname n3
	!
	interface eth5
	 ip address 10.0.21.2/24
	!
	interface eth4
	 ip address 10.0.19.1/24
	!
	interface eth3
	 ip address 10.0.16.1/24
	!
	interface eth2
	 ip address 10.0.12.1/24
	!
	interface eth1
	 ip address 10.0.11.2/24
	!
	interface eth0
	 ip address 10.0.0.3/24
	!
    }
    canvas c1
    iconcoords {464.93700445050325 107.23224410826211}
    labelcoords {465.93700445050325 93.23224410826262}
    interface-peer {eth0 n10}
    interface-peer {eth1 n1}
    interface-peer {eth2 n2}
    interface-peer {eth3 n6}
    interface-peer {eth4 n5}
    custom-config {
	custom-config-id service:OvsService
	custom-command OvsService
	config {
	files=('OvsService.sh', )
	}
    }
    custom-config {
	custom-config-id service:OvsService:OvsService.sh
	custom-command OvsService.sh
	config {
	#!/bin/sh
	# auto-generated by OvsService (OvsService.py)
	## First make sure that the ovs services are up and running
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch itself, set the fail mode to secure, 
	## this stops it from routing traffic without defined flows.
	## remove the -- and everything after if you want it to act as a regular switch
	ovs-vsctl add-br s3 -- set Bridge s3 fail-mode=secure
	ovs-vsctl set bridge s3 other-config:datapath-id=0000000000000003
	ovs-vsctl set bridge s3 stp_enable=true
	ip addr del 10.0.11.2 dev eth1
	## Add the CORE interface to the switch
	ovs-vsctl add-port s3 eth1 -- set Interface eth1 ofport_request=1
	## start them up so we can send/receive data
	ovs-ofctl mod-port s3 eth1 up
	ip addr del 10.0.12.1 dev eth2
	## Add the CORE interface to the switch
	ovs-vsctl add-port s3 eth2 -- set Interface eth2 ofport_request=2
	ovs-ofctl mod-port s3 eth2 up
	ip addr del 10.0.16.1 dev eth3
	## Add the CORE interface to the switch
	ovs-vsctl add-port s3 eth3 -- set Interface eth3 ofport_request=3
	## start them up so we can send/receive data
	ovs-ofctl mod-port s3 eth3 up
	ip addr del 10.0.19.1 dev eth4
	## Add the CORE interface to the switch
	ovs-vsctl add-port s3 eth4 -- set Interface eth4 ofport_request=4
	ovs-ofctl mod-port s3 eth4 up
	
	ip addr del 10.0.21.2 dev eth5
	## Add the CORE interface to the switch
	ovs-vsctl add-port s3 eth5 -- set Interface eth5 ofport_request=5
	ovs-ofctl mod-port s3 eth5 up
	
	## We assume there will be an SDN controller on the other end of this, 
	## but it will still function if there's not
	#ovs-vsctl set-controller s3 tcp:10.0.0.254:6633
	#ovs-vsctl set-controller s3 tcp:192.168.56.112:6633
	ovs-vsctl set-controller s3 tcp:172.17.0.1:6633
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.0.254
	
	}
    }
    services {OvsService DefaultRoute}
    interface-peer {eth5 n18}
}

node n4 {
    type router
    model router
    network-config {
	hostname n4
	!
	interface eth3
	 ip address 10.0.20.2/24
	!
	interface eth2
	 ip address 10.0.17.2/24
	!
	interface eth1
	 ip address 10.0.14.2/24
	!
	interface eth0
	 ip address 10.0.0.4/24
	!
    }
    canvas c1
    iconcoords {621.7776804010966 349.34317440530367}
    labelcoords {621.7776804010966 381.34317440530447}
    interface-peer {eth0 n10}
    interface-peer {eth1 n2}
    interface-peer {eth2 n6}
    interface-peer {eth3 n5}
    custom-config {
	custom-config-id service:OvsService
	custom-command OvsService
	config {
	files=('OvsService.sh', )
	}
    }
    custom-config {
	custom-config-id service:OvsService:OvsService.sh
	custom-command OvsService.sh
	config {
	#!/bin/sh
	# auto-generated by OvsService (OvsService.py)
	## First make sure that the ovs services are up and running
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch itself, set the fail mode to secure, 
	## this stops it from routing traffic without defined flows.
	## remove the -- and everything after if you want it to act as a regular switch
	ovs-vsctl add-br s4 -- set Bridge s4 fail-mode=secure
	ovs-vsctl set bridge s4 other-config:datapath-id=0000000000000004
	ovs-vsctl set bridge s4 stp_enable=true
	ip addr del 10.0.14.2 dev eth1
	## Add the CORE interface to the switch
	ovs-vsctl add-port s4 eth1 -- set Interface eth1 ofport_request=2
	ovs-ofctl mod-port s4 eth1 up
	ip addr del 10.0.17.2 dev eth2
	## Add the CORE interface to the switch
	ovs-vsctl add-port s4 eth2 -- set Interface eth2 ofport_request=3
	ovs-ofctl mod-port s4 eth2 up
	ip addr del 10.0.20.2 dev eth3
	## Add the CORE interface to the switch
	ovs-vsctl add-port s4 eth3 -- set Interface eth3 ofport_request=1
	ovs-ofctl mod-port s4 eth3 up
	
	## We assume there will be an SDN controller on the other end of this, 
	## but it will still function if there's not
	#ovs-vsctl set-controller s4 tcp:10.0.0.254:6633
	#ovs-vsctl set-controller s4 tcp:192.168.56.112:6633
	ovs-vsctl set-controller s4 tcp:172.17.0.1:6633
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.0.254
	
	}
    }
    services {OvsService DefaultRoute}
}

node n5 {
    type router
    model router
    network-config {
	hostname n5
	!
	interface eth4
	 ip address 10.0.20.1/24
	!
	interface eth3
	 ip address 10.0.19.2/24
	!
	interface eth2
	 ip address 10.0.18.2/24
	!
	interface eth1
	 ip address 10.0.3.1/24
	!
	interface eth0
	 ip address 10.0.0.5/24
	!
    }
    canvas c1
    iconcoords {725.3004300976386 293.3948411283719}
    labelcoords {731.3004300976386 280.39484112837226}
    interface-peer {eth0 n10}
    interface-peer {eth1 n9}
    interface-peer {eth2 n6}
    interface-peer {eth3 n3}
    interface-peer {eth4 n4}
    custom-config {
	custom-config-id service:OvsService
	custom-command OvsService
	config {
	files=('OvsService.sh', )
	}
    }
    custom-config {
	custom-config-id service:OvsService:OvsService.sh
	custom-command OvsService.sh
	config {
	#!/bin/sh
	# auto-generated by OvsService (OvsService.py)
	## First make sure that the ovs services are up and running
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch itself, set the fail mode to secure, 
	## this stops it from routing traffic without defined flows.
	## remove the -- and everything after if you want it to act as a regular switch
	ovs-vsctl add-br s5 -- set Bridge s5 fail-mode=secure
	ovs-vsctl set bridge s5 other-config:datapath-id=0000000000000005
	ovs-vsctl set bridge s5 stp_enable=true
	ip addr del 10.0.3.1 dev eth1
	## Add the CORE interface to the switch
	ovs-vsctl add-port s5 eth1 -- set Interface eth1 ofport_request=1
	ovs-ofctl mod-port s5 eth1 up
	ip addr del 10.0.18.2 dev eth2
	## Add the CORE interface to the switch
	ovs-vsctl add-port s5 eth2 -- set Interface eth2 ofport_request=2
	ovs-ofctl mod-port s5 eth2 up
	ip addr del 10.0.19.2 dev eth3
	## Add the CORE interface to the switch
	ovs-vsctl add-port s5 eth3 -- set Interface eth3 ofport_request=3
	ovs-ofctl mod-port s5 eth3 up
	ip addr del 10.0.20.1 dev eth4
	## Add the CORE interface to the switch
	ovs-vsctl add-port s5 eth4 -- set Interface eth4 ofport_request=4
	ovs-ofctl mod-port s5 eth4 up
	
	## We assume there will be an SDN controller on the other end of this, 
	## but it will still function if there's not
	#ovs-vsctl set-controller s5 tcp:10.0.0.254:6633
	#ovs-vsctl set-controller s5 tcp:192.168.56.112:6633
	ovs-vsctl set-controller s5 tcp:172.17.0.1:6633
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.0.254
	
	}
    }
    services {OvsService DefaultRoute}
}

node n6 {
    type router
    model router
    network-config {
	hostname n6
	!
	interface eth6
	 ip address 10.0.23.2/24
	!
	interface eth5
	 ip address 10.0.18.1/24
	!
	interface eth4
	 ip address 10.0.17.1/24
	!
	interface eth3
	 ip address 10.0.16.2/24
	!
	interface eth2
	 ip address 10.0.15.2/24
	!
	interface eth1
	 ip address 10.0.13.2/24
	!
	interface eth0
	 ip address 10.0.0.6/24
	!
    }
    canvas c1
    iconcoords {573.7952775912248 239.14647876956735}
    labelcoords {575.7952775912248 220.14647876956724}
    interface-peer {eth0 n10}
    interface-peer {eth1 n1}
    interface-peer {eth2 n2}
    interface-peer {eth3 n3}
    interface-peer {eth4 n4}
    interface-peer {eth5 n5}
    custom-config {
	custom-config-id service:OvsService
	custom-command OvsService
	config {
	files=('OvsService.sh', )
	}
    }
    custom-config {
	custom-config-id service:OvsService:OvsService.sh
	custom-command OvsService.sh
	config {
	#!/bin/sh
	# auto-generated by OvsService (OvsService.py)
	## First make sure that the ovs services are up and running
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch itself, set the fail mode to secure, 
	## this stops it from routing traffic without defined flows.
	## remove the -- and everything after if you want it to act as a regular switch
	ovs-vsctl add-br s6 -- set Bridge s6 fail-mode=secure
	ovs-vsctl set bridge s6 other-config:datapath-id=0000000000000006
	ovs-vsctl set bridge s6 stp_enable=true
	ip addr del 10.0.13.2 dev eth1
	## Add the CORE interface to the switch
	ovs-vsctl add-port s6 eth1 -- set Interface eth1 ofport_request=1
	ovs-ofctl mod-port s6 eth1 up
	ip addr del 10.0.15.2 dev eth2
	## Add the CORE interface to the switch
	ovs-ofctl mod-port s6 eth2 up
	ip addr del 10.0.16.2 dev eth3
	## Add the CORE interface to the switch
	ovs-vsctl add-port s6 eth3 -- set Interface eth3 ofport_request=3
	ovs-ofctl mod-port s6 eth3 up
	ip addr del 10.0.17.1 dev eth4
	## Add the CORE interface to the switch
	ovs-vsctl add-port s6 eth4 -- set Interface eth4 ofport_request=4
	ovs-ofctl mod-port s6 eth4 up
	ip addr del 10.0.18.1 dev eth5
	## Add the CORE interface to the switch
	ovs-vsctl add-port s6 eth5 -- set Interface eth5 ofport_request=5
	ovs-ofctl mod-port s6 eth5 up
	
	ip addr del 10.0.23.2 dev eth6
	## Add the CORE interface to the switch
	ovs-vsctl add-port s6 eth6 -- set Interface eth6 ofport_request=6
	ovs-ofctl mod-port s6 eth6 up
	
	## We assume there will be an SDN controller on the other end of this, 
	## but it will still function if there's not
	#ovs-vsctl set-controller s6 tcp:10.0.0.254:6633
	#ovs-vsctl set-controller s6 tcp:192.168.56.112:6633
	ovs-vsctl set-controller s6 tcp:172.17.0.1:6633
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.0.254
	
	}
    }
    services {OvsService DefaultRoute}
    interface-peer {eth6 n19}
}

node n7 {
    type router
    model router
    network-config {
	hostname n7
	!
	interface eth3
	 ip address 10.0.7.1/24
	 ipv6 address :0::1/64
	!
	interface eth2
	 ip address 10.0.4.1/24
	!
	interface eth1
	 ip address 10.0.1.2/24
	!
	interface eth0
	 ip address 10.0.0.7/24
	!
    }
    canvas c1
    iconcoords {286.0209997269991 424.72147332538464}
    labelcoords {286.0209997269991 456.72147332538464}
    interface-peer {eth0 n10}
    interface-peer {eth1 n1}
    interface-peer {eth2 n12}
    custom-config {
	custom-config-id service:OvsService
	custom-command OvsService
	config {
	files=('OvsService.sh', )
	}
    }
    custom-config {
	custom-config-id service:OvsService:OvsService.sh
	custom-command OvsService.sh
	config {
	#!/bin/sh
	# auto-generated by OvsService (OvsService.py)
	## First make sure that the ovs services are up and running
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch itself, set the fail mode to secure, 
	## this stops it from routing traffic without defined flows.
	## remove the -- and everything after if you want it to act as a regular switch
	ovs-vsctl add-br s7 -- set Bridge s7 fail-mode=secure
	ovs-vsctl set bridge s7 other-config:datapath-id=0000000000000007
	ovs-vsctl set bridge s7 stp_enable=true
	ip addr del 10.0.1.2 dev eth1
	## Add the CORE interface to the switch
	ovs-vsctl add-port s7 eth1 -- set Interface eth1 ofport_request=1
	ovs-ofctl mod-port s7 eth1 up
	ip addr del 10.0.4.1 dev eth2
	## Add the CORE interface to the switch
	ovs-vsctl add-port s7 eth2 -- set Interface eth2 ofport_request=2
	ovs-ofctl mod-port s7 eth2 up
	ip addr del 10.0.5.1 dev eth3
	## Add the CORE interface to the switch
	ovs-vsctl add-port s7 eth3 -- set Interface eth3 ofport_request=3
	ovs-ofctl mod-port s7 eth3 up
	
	## We assume there will be an SDN controller on the other end of this, 
	## but it will still function if there's not
	#ovs-vsctl set-controller s7 tcp:10.0.0.254:6633
	#ovs-vsctl set-controller s7 tcp:192.168.56.112:6633
	ovs-vsctl set-controller s7 tcp:172.17.0.1:6633
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.0.254
	
	}
    }
    services {OvsService DefaultRoute}
    interface-peer {eth3 n8}
}

node n8 {
    type router
    model router
    network-config {
	hostname n8
	!
	interface eth4
	 ip address 10.0.7.2/24
	 ipv6 address :0::2/64
	!
	interface eth3
	 ip address 10.0.5.2/24
	 ipv6 address :0::2/64
	!
	interface eth2
	 ip address 10.0.6.1/24
	!
	interface eth1
	 ip address 10.0.2.2/24
	!
	interface eth0
	 ip address 10.0.0.8/24
	!
    }
    canvas c1
    iconcoords {494.67236468381 462.70069990196737}
    labelcoords {494.67236468381 494.7006999019666}
    interface-peer {eth0 n10}
    interface-peer {eth1 n2}
    interface-peer {eth2 n13}
    custom-config {
	custom-config-id service:OvsService
	custom-command OvsService
	config {
	files=('OvsService.sh', )
	}
    }
    custom-config {
	custom-config-id service:OvsService:OvsService.sh
	custom-command OvsService.sh
	config {
	#!/bin/sh
	# auto-generated by OvsService (OvsService.py)
	## First make sure that the ovs services are up and running
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch itself, set the fail mode to secure, 
	## this stops it from routing traffic without defined flows.
	## remove the -- and everything after if you want it to act as a regular switch
	ovs-vsctl add-br s8 -- set Bridge s8 fail-mode=secure
	ovs-vsctl set bridge s8 other-config:datapath-id=0000000000000008
	ovs-vsctl set bridge s8 stp_enable=true
	ip addr del 10.0.2.2 dev eth1
	## Add the CORE interface to the switch
	ovs-vsctl add-port s8 eth1 -- set Interface eth1 ofport_request=1
	ovs-ofctl mod-port s8 eth1 up
	ip addr del 10.0.6.1 dev eth2
	## Add the CORE interface to the switch
	ovs-vsctl add-port s8 eth2 -- set Interface eth2 ofport_request=2
	ovs-ofctl mod-port s8 eth2 up
	ip addr del 10.0.7.1 dev eth3
	## Add the CORE interface to the switch
	ovs-vsctl add-port s8 eth3 -- set Interface eth3 ofport_request=3
	ovs-ofctl mod-port s8 eth3 up
	
	## We assume there will be an SDN controller on the other end of this, 
	## but it will still function if there's not
	#ovs-vsctl set-controller s8 tcp:10.0.0.254:6633
	#ovs-vsctl set-controller s8 tcp:192.168.56.112:6633
	ovs-vsctl set-controller s8 tcp:172.17.0.1:6633
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.0.254
	
	}
    }
    services {OvsService DefaultRoute}
    interface-peer {eth3 n9}
    interface-peer {eth4 n7}
}

node n9 {
    type router
    model router
    network-config {
	hostname n9
	!
	interface eth2
	 ip address 10.0.5.1/24
	 ipv6 address :0::1/64
	!
	interface eth1
	 ip address 10.0.3.2/24
	!
	interface eth0
	 ip address 10.0.0.9/24
	!
    }
    canvas c1
    iconcoords {713.421859664697 428.9790080482626}
    labelcoords {713.421859664697 460.9790080482619}
    interface-peer {eth0 n10}
    interface-peer {eth1 n5}
    custom-config {
	custom-config-id service:OvsService
	custom-command OvsService
	config {
	files=('OvsService.sh', )
	}
    }
    custom-config {
	custom-config-id service:OvsService:OvsService.sh
	custom-command OvsService.sh
	config {
	#!/bin/sh
	# auto-generated by OvsService (OvsService.py)
	## First make sure that the ovs services are up and running
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch itself, set the fail mode to secure, 
	## this stops it from routing traffic without defined flows.
	## remove the -- and everything after if you want it to act as a regular switch
	ovs-vsctl add-br s9 -- set Bridge s9 fail-mode=secure
	ovs-vsctl set bridge s9 other-config:datapath-id=0000000000000009
	ovs-vsctl set bridge s9 stp_enable=true
	ip addr del 10.0.3.2 dev eth1
	## Add the CORE interface to the switch
	ovs-vsctl add-port s9 eth1 -- set Interface eth1 ofport_request=1
	ovs-ofctl mod-port s9 eth1 up
	ip addr del 10.0.8.1 dev eth2
	## Add the CORE interface to the switch
	ovs-vsctl add-port s9 eth2 -- set Interface eth2 ofport_request=2
	ovs-ofctl mod-port s9 eth2 up
	ip addr del 10.0.9.1 dev eth3
	## Add the CORE interface to the switch
	ovs-vsctl add-port s9 eth3 -- set Interface eth3 ofport_request=3
	ovs-ofctl mod-port s9 eth3 up
	
	## We assume there will be an SDN controller on the other end of this, 
	## but it will still function if there's not
	#ovs-vsctl set-controller s9 tcp:10.0.0.254:6633
	#ovs-vsctl set-controller s9 tcp:192.168.56.112:6633
	ovs-vsctl set-controller s9 tcp:172.17.0.1:6633
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.0.254
	
	}
    }
    services {OvsService DefaultRoute}
    interface-peer {eth2 n8}
}

node n10 {
    type lanswitch
    network-config {
	hostname n10
	!
    }
    canvas c1
    iconcoords {357.6467943905632 531.60686484845}
    labelcoords {357.6467943905632 555.6068648484497}
    interface-peer {e0 n1}
    interface-peer {e1 n2}
    interface-peer {e2 n3}
    interface-peer {e3 n4}
    interface-peer {e4 n5}
    interface-peer {e5 n6}
    interface-peer {e6 n7}
    interface-peer {e7 n8}
    interface-peer {e8 n9}
    interface-peer {e9 n17}
    interface-peer {e10 n18}
}

node n12 {
    type router
    model router
    network-config {
	hostname AS400
	!
	interface eth1
	 ip address 192.168.3.1/24
	!
	interface eth0
	 ip address 10.3.3.1/24
	!
    }
    canvas c1
    iconcoords {135.0 508.0}
    labelcoords {134.0 543.0}
    interface-peer {eth0 n7}
    interface-peer {eth1 n11}
    services {BGP zebra}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	hostname as200
	password sdnip
	interface eth0
	  ip address 10.3.3.1/24
	  
	!
	interface eth1
	  ip address 192.168.3.1/24
	  
	!
	!
	! BGP configuration
	!
	! You should configure the AS number below,
	! along with this router's peers.
	!
	router bgp 400
	  bgp router-id 10.3.3.1
	  redistribute connected
	
	  timers bgp 3 9
	  neighbor 10.3.3.3 remote-as 100
	  neighbor 10.3.3.3 ebgp-multihop
	  neighbor 10.3.3.3 timers connect 5
	  neighbor 10.3.3.3 advertisement-interval 5
	  network 192.168.3.0/24
	  
	!
	log stdout
	}
    }
}

node n13 {
    type router
    model router
    network-config {
	hostname AS500
	!
	interface eth0
	 ip address 10.4.4.1/24
	!
	interface eth1
	 ip address 192.168.4.1/24
	!
    }
    canvas c1
    iconcoords {636.0 593.0}
    labelcoords {636.0 625.0}
    interface-peer {eth0 n8}
    interface-peer {eth1 n14}
    services {BGP zebra}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	hostname as500
	password sdnip
	interface eth0
	  ip address 10.4.4.1/24
	  
	!
	interface eth1
	  ip address 192.168.4.1/24
	  
	!
	!
	! BGP configuration
	!
	! You should configure the AS number below,
	! along with this router's peers.
	!
	router bgp 500
	  bgp router-id 10.4.4.1
	  redistribute connected
	
	  timers bgp 3 9
	  neighbor 10.4.4.4 remote-as 100
	  neighbor 10.4.4.4 ebgp-multihop
	  neighbor 10.4.4.4 timers connect 5
	  neighbor 10.4.4.4 advertisement-interval 5
	  network 192.168.4.0/24
	
	!
	log stdout
	}
    }
}

node n17 {
    type rj45
    network-config {
	hostname enp0s9
	!
    }
    canvas c1
    iconcoords {350.0 712.0}
    labelcoords {350.0 744.0}
    interface-peer {0 n10}
}

node n19 {
    type router
    model router
    network-config {
	hostname AS300
	!
	interface eth1
	 ip address 192.168.2.1/24
	!
	interface eth0
	 ip address 10.2.2.1/24
	!
    }
    canvas c1
    iconcoords {885.0 145.0}
    labelcoords {885.0 177.0}
    interface-peer {eth0 n6}
    services {BGP zebra}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	hostname as300
	password sdnip
	
	interface eth0
	  ip address 10.2.2.1/24
	  
	!
	interface eth1
	  ip address 192.168.2.1/24
	  
	!
	!
	! BGP configuration
	!
	! You should configure the AS number below,
	! along with this router's peers.
	!
	router bgp 300
	  bgp router-id 10.2.2.1
	  redistribute connected
	 neighbor 10.2.2.2 remote-as 100
	  neighbor 10.2.2.2 ebgp-multihop
	  neighbor 10.2.2.2 timers connect 5
	  neighbor 10.2.2.2 advertisement-interval 5
	  network 192.168.2.0/24
	  network 10.2.2.0/24
	!
	log stdout
	}
    }
    interface-peer {eth1 n22}
}

node n20 {
    type router
    model router
    network-config {
	hostname AS200
	!
	interface eth1
	 ip address 192.168.1.1/24
	!
	interface eth0
	 ip address 10.1.1.2/24
	!
    }
    canvas c1
    iconcoords {89.0 192.0}
    labelcoords {89.0 224.0}
    services {BGP zebra}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	hostname as200
	password sdnip
	
	interface eth0
	  ip address 10.1.1.2/24
	  
	!
	interface eth1
	  ip address 192.168.1.1/24
	  
	!
	!
	! BGP configuration
	!
	! You should configure the AS number below,
	! along with this router's peers.
	!
	router bgp 200
	  bgp router-id 10.1.1.2
	  redistribute connected
	
	  timers bgp 3 9
	  neighbor 10.1.1.1 remote-as 100
	  neighbor 10.1.1.1 ebgp-multihop
	  neighbor 10.1.1.1 timers connect 5
	  neighbor 10.1.1.1 advertisement-interval 5
	  network 192.168.1.0/24
	  network 10.1.1.0/24
	!
	log stdout
	}
    }
    interface-peer {eth0 n1}
    interface-peer {eth1 n21}
}

node n21 {
    type router
    model PC
    network-config {
	hostname User200
	!
	interface eth0
	 ip address 192.168.1.2/24
	!
    }
    canvas c1
    iconcoords {195.33333333333331 105.66666666666669}
    labelcoords {195.33333333333331 137.66666666666669}
    interface-peer {eth0 n20}
}

node n22 {
    type router
    model PC
    network-config {
	hostname User600
	!
	interface eth0
	 ip address 192.168.2.2/24
	!
    }
    canvas c1
    iconcoords {706.0 95.33333333333334}
    labelcoords {706.0 127.33333333333333}
    interface-peer {eth0 n19}
}

node n18 {
    type router
    model router
    network-config {
	hostname BGPSpeaker1
	!
	interface eth1
	!
	interface eth0
	 ip address 10.0.0.10/24
	!
    }
    canvas c1
    iconcoords {252.0 60.0}
    labelcoords {258.0 40.0}
    interface-peer {eth0 n10}
    interface-peer {eth1 n3}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	hostname internal_speaker
	password sdnip
	
	interface eth0
	  ip address 10.0.0.10/24
	  no link-detect
	!
	interface eth1
	  ip address 10.1.1.1/24
	  ip address 10.2.2.2/24
	  ip address 10.3.3.3/24
	  ip address 10.4.4.4/24
	  ip address 10.5.5.5/24
	  no link-detect
	!
	!
	! BGP configuration
	!
	! You should configure the AS number below,
	! along with this router's peers.
	!
	router bgp 100
	  bgp router-id 10.0.0.10
	  redistribute connected
	  timers bgp 3 9
	  !
	  neighbor 10.2.2.1 remote-as 300
	  neighbor 10.2.2.1 ebgp-multihop
	  neighbor 10.2.2.1 timers connect 5
	  neighbor 10.2.2.1 advertisement-interval 5
	  !
	  neighbor 10.1.1.2 remote-as 200
	  neighbor 10.1.1.2 ebgp-multihop
	  neighbor 10.1.1.2 timers connect 5
	  neighbor 10.1.1.2 advertisement-interval 5
	  !
	
	  !
	  neighbor 10.3.3.1 remote-as 400
	  neighbor 10.3.3.1 ebgp-multihop
	  neighbor 10.3.3.1 timers connect 5
	  neighbor 10.3.3.1 advertisement-interval 5
	  !
	  !
	  neighbor 10.4.4.1 remote-as 500
	  neighbor 10.4.4.1 ebgp-multihop
	  neighbor 10.4.4.1 timers connect 5
	  neighbor 10.4.4.1 advertisement-interval 5
	  !
	  !
	  neighbor 10.5.5.1 remote-as 600
	  neighbor 10.5.5.1 ebgp-multihop
	  neighbor 10.5.5.1 timers connect 5
	  neighbor 10.5.5.1 advertisement-interval 5
	  !
	
	  ! ONOS
	  neighbor 10.0.0.254 remote-as 100
	  neighbor 10.0.0.254 port 2000
	  neighbor 10.0.0.254 timers connect 5
	  
	
	!
	log stdout
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.0.254
	ip link add link eth1 dev eth1-1 address 00:00:00:00:00:a1 type macvlan
	ip link add link eth1 dev eth1-2 address 00:00:00:00:00:a2 type macvlan
	ip link add link eth1 dev eth1-3 address 00:00:00:00:00:a3 type macvlan
	ip link add link eth1 dev eth1-4 address 00:00:00:00:00:a4 type macvlan
	
	ifconfig eth1-1 10.1.1.1 netmask 255.255.255.0 up
	ifconfig eth1-2 10.2.2.2 netmask 255.255.255.0 up
	ifconfig eth1-3 10.3.3.3 netmask 255.255.255.0 up
	ifconfig eth1-3 10.4.4.4 netmask 255.255.255.0 up
	
	}
    }
    services {BGP zebra DefaultRoute}
}

node n11 {
    type router
    model PC
    network-config {
	hostname User400
	!
	interface eth0
	 ip address 192.168.3.2/24
	!
    }
    canvas c1
    iconcoords {42.0 597.0}
    labelcoords {42.0 629.0}
    interface-peer {eth0 n12}
}

node n14 {
    type router
    model PC
    network-config {
	hostname User500
	!
	interface eth0
	 ip address 192.168.4.2/24
	!
    }
    canvas c1
    iconcoords {843.0 606.0}
    labelcoords {843.0 638.0}
    interface-peer {eth0 n13}
}

link l1 {
    color Green
    nodes {n1 n10}
    bandwidth 0
}

link l2 {
    color Green
    nodes {n2 n10}
    bandwidth 0
}

link l3 {
    color Green
    nodes {n3 n10}
    bandwidth 0
}

link l4 {
    color Green
    nodes {n4 n10}
    bandwidth 0
}

link l5 {
    color Green
    nodes {n5 n10}
    bandwidth 0
}

link l6 {
    color Green
    nodes {n6 n10}
    bandwidth 0
}

link l7 {
    color Green
    nodes {n7 n10}
    bandwidth 0
}

link l8 {
    color Green
    nodes {n8 n10}
    bandwidth 0
}

link l9 {
    color Green
    nodes {n9 n10}
    bandwidth 0
}

link l10 {
    nodes {n1 n7}
    bandwidth 0
}

link l11 {
    nodes {n2 n8}
    bandwidth 0
}

link l12 {
    nodes {n5 n9}
    bandwidth 0
}

link l13 {
    color Magenta
    nodes {n12 n7}
    bandwidth 0
}

link l15 {
    color Magenta
    nodes {n13 n8}
    bandwidth 0
}

link l19 {
    nodes {n1 n2}
    bandwidth 0
}

link l20 {
    nodes {n1 n3}
    bandwidth 0
}

link l21 {
    nodes {n3 n2}
    bandwidth 0
}

link l22 {
    nodes {n1 n6}
    bandwidth 0
}

link l23 {
    nodes {n2 n4}
    bandwidth 0
}

link l24 {
    nodes {n2 n6}
    bandwidth 0
}

link l25 {
    nodes {n3 n6}
    bandwidth 0
}

link l26 {
    nodes {n6 n4}
    bandwidth 0
}

link l27 {
    nodes {n6 n5}
    bandwidth 0
}

link l28 {
    nodes {n3 n5}
    bandwidth 0
}

link l29 {
    nodes {n5 n4}
    bandwidth 0
}

link l30 {
    nodes {n17 n10}
}

link l33 {
    nodes {n20 n1}
    bandwidth 0
}

link l34 {
    nodes {n19 n6}
    bandwidth 0
}

link l35 {
    nodes {n21 n20}
    bandwidth 0
}

link l36 {
    nodes {n22 n19}
    bandwidth 0
}

link l31 {
    color Green
    nodes {n18 n10}
    bandwidth 0
}

link l32 {
    nodes {n18 n3}
    bandwidth 0
}

link l14 {
    nodes {n12 n11}
    bandwidth 0
}

link l16 {
    nodes {n13 n14}
    bandwidth 0
}

link l17 {
    nodes {n9 n8}
    bandwidth 0
}

link l18 {
    nodes {n7 n8}
    bandwidth 0
}

annotation a1 {
    iconcoords {15.0 33.0 234.0 323.0}
    type oval
    label {AS 200}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #CFCFFF
    width 0
    border black
    canvas c1
}

annotation a2 {
    iconcoords {20.0 401.0 233.0 750.0}
    type oval
    label {AS 400}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #7ccfbb
    width 0
    border black
    canvas c1
}

annotation a3 {
    iconcoords {488 529 898 690}
    type oval
    label {AS 500}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #e3c0ff
    width 0
    border black
    canvas c1
}

annotation a4 {
    iconcoords {636.0 8.0 980.0 249.0}
    type oval
    label {AS 300}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #a8f1ff
    width 0
    border black
    canvas c1
}

annotation a5 {
    iconcoords {203.0 9.0 769.0 502.0}
    type rectangle
    label {AS 100 over SDN}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #c0f48e
    width 0
    border black
    rad 25
    canvas c1
}

annotation a6 {
    iconcoords {56.0 101.0}
    type text
    label {192.168.1.0/24}
    labelcolor #ce2423
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a7 {
    type text
    iconcoords {115.0 101.0}
    label {}
    canvas c1
}

annotation a8 {
    iconcoords {799.0 76.0}
    type text
    label {192.168.2.0/24}
    labelcolor #ce2423
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a9 {
    iconcoords {662.0 639.0}
    type text
    label {192.168.4.0/24}
    labelcolor #ce2423
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a10 {
    iconcoords {103.0 637.0}
    type text
    label {192.168.3.0/24}
    labelcolor #ce2423
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a11 {
    iconcoords {117.0 193.0}
    type text
    label {10.1.1.2}
    labelcolor #113c00
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a12 {
    type text
    iconcoords {137.0 246.0}
    label {}
    canvas c1
}

annotation a13 {
    iconcoords {158.0 509.0}
    type text
    label {10.3.3.1}
    labelcolor #113c00
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a14 {
    iconcoords {556.0 589.0}
    type text
    label {10.4.4.1}
    labelcolor #113c00
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a15 {
    iconcoords {806.0 176.0}
    type text
    label {10.2.2.1}
    labelcolor #113c00
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

hook 4:runtime_hook.sh {
#!/bin/sh
# session hook script; write commands here to execute on the host at the
# specified state
BRIFNAME=$(find /sys/devices/virtual/net -name 'enp0s9' | awk -F '[/:]' '{print $6}')
ip addr add 10.0.0.254/24 dev $BRIFNAME
}

option global {
    interface_names yes
    ip_addresses no
    ipv6_addresses no
    node_labels yes
    link_labels no
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

